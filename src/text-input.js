'use strict';
import React, { Component } from 'react';
import { AppRegistry, Text, TextInput, StyleSheet,View } from 'react-native';

class PizzaTranslator extends Component {
  constructor(props) {
    super(props);
    this.state = {text: ''};
  }

  render() {
    return (
      <View style={{padding: 10}}>
        <TextInput
          style={{height: 40}}
          placeholder="Type here to translate!"
          onChangeText={(text) => this.setState({text})}
        />
        <Text style={{padding: 10, fontSize: 42}}>
          {this.state.text.split(' ').map((word) => word && 'üçï').join(' ')}
        </Text>
      </View>
    );
  }
}

class UselessTextInput extends Component {
  constructor(props) {
    super(props);
    this.state = { text: 'Useless Placeholder' };
  }

  render() {
    return (
      <TextInput
        style={{height: 40, borderColor: 'gray', borderWidth: 1}}
        onChangeText={(text) => this.setState({text})}
        value={this.state.text}
      />
    );
  }
}

class UselessTextInputMultiline extends Component {
  constructor(props) {
    super(props);
    this.state = {
      text: 'Useless Multiline Placeholder',
    };
  }

  // If you type something in the text box that is a color, the background will change to that
  // color.
  render() {
    return (
     <View style={{
       backgroundColor: this.state.text,
       borderBottomColor: '#000000',
       borderBottomWidth: 1 }}
     >
       <UselessTextInput
         multiline = {true}
         numberOfLines = {4}
         onChangeText={(text) => this.setState({text})}
         value={this.state.text}
       />
     </View>
    );
  }
}

var TextEventsExample = React.createClass({
    // ËøôÁßçÂàùÂßãÂåñstateÁöÑÊñπÂºè‰∏çÂª∫ËÆÆ‰ΩøÁî®ÔºåÊé®Ëçêstate.jsÁöÑÂÜôÊ≥ï„ÄÇ
  getInitialState: function() {
    return {
      curText: '<No Event>',
      prevText: '<No Event>',
      prev2Text: '<No Event>',
    };
  },

  updateText: function(text) {
    this.setState((state) => {
      return {
        curText: text,
        prevText: state.curText,
        prev2Text: state.prevText,
      };
    });
  },

  render: function() {
    return (
      <View>
        <TextInput
          autoCapitalize="none"
          placeholder="Enter text to see events"
          autoCorrect={false}
          onFocus={() => this.updateText('onFocus')}
          onBlur={() => this.updateText('onBlur')}
          onChange={(event) => this.updateText(
            'onChange text: ' + event.nativeEvent.text
          )}
          onEndEditing={(event) => this.updateText(
            'onEndEditing text: ' + event.nativeEvent.text
          )}
          onSubmitEditing={(event) => this.updateText(
            'onSubmitEditing text: ' + event.nativeEvent.text
          )}
          style={styles.singleLine}
        />
        <Text style={styles.eventLabel}>
          {this.state.curText}{'\n'}
          (prev: {this.state.prevText}){'\n'}
          (prev2: {this.state.prev2Text})
        </Text>
      </View>
    );
  }
});

//AppRegistry.registerComponent('AwesomeProject', () => TextEventsExample);

class AutoExpandingTextInput extends React.Component {
  constructor(props) {
    super(props);
    this.state = {text: '', height: 0};
  }
  render() {
    return (
      <TextInput
        multiline={true}
        onChange={(event) => {
          this.setState({
            text: event.nativeEvent.text,
            height: event.nativeEvent.contentSize.height,
          });
        }}
        style={[styles.default, {height: Math.max(35, this.state.height)}]}
        value={this.state.text}
      />
    );
  }
}

//AppRegistry.registerComponent('AwesomeProject', () => AutoExpandingTextInput);

class RewriteExample extends React.Component {
  constructor(props) {
    super(props);
    this.state = {text: ''};
  }
  render() {
    var limit = 20;
    var remainder = limit - this.state.text.length;
    var remainderColor = remainder > 5 ? 'blue' : 'red';
    return (
      <View style={styles.rewriteContainer}>
        <TextInput
          multiline={false}
          maxLength={limit}
          onChangeText={(text) => {
            this.setState({text});
          }}
          style={styles.default}
          value={this.state.text}
        />
        <Text style={[styles.remainder, {color: remainderColor}]}>
          {remainder}
        </Text>
      </View>
    );
  }
}

// AppRegistry.registerComponent('AwesomeProject', () => RewriteExample);

class TokenizedTextExample extends React.Component {
  constructor(props) {
    super(props);
    this.state = {text: 'Hello #World'};
  }
  render() {

    //define delimiter
    let delimiter = /\s+/;

    //split string
    let _text = this.state.text;
    let token, index, parts = [];
    while (_text) {
      delimiter.lastIndex = 0;
      token = delimiter.exec(_text);
      if (token === null) {
        break;
      }
      index = token.index;
      if (token[0].length === 0) {
        index = 1;
      }
      parts.push(_text.substr(0, index));
      parts.push(token[0]);
      index = index + token[0].length;
      _text = _text.slice(index);
    }
    parts.push(_text);

    //highlight hashtags
    parts = parts.map((text) => {
      if (/^#/.test(text)) {
        return <Text key={text} style={styles.hashtag}>{text}</Text>;
      } else {
        return text;
      }
    });

    return (
      <View>
        <TextInput
          multiline={true}
          style={styles.multiline}
          onChangeText={(text) => {
            this.setState({text});
          }}>
          <Text>{parts}</Text>
        </TextInput>
      </View>
    );
  }
}

// AppRegistry.registerComponent('AwesomeProject', () => TokenizedTextExample);

var BlurOnSubmitExample = React.createClass({
  focusNextField(nextField) {
    this.refs[nextField].focus();
  },

  render: function() {
    return (
      <View>
        <TextInput
          ref="1"
          style={styles.singleLine}
          placeholder="blurOnSubmit = false"
          returnKeyType="next"
          blurOnSubmit={false}
          onSubmitEditing={() => this.focusNextField('2')}
        />
        <TextInput
          ref="2"
          style={styles.singleLine}
          keyboardType="email-address"
          placeholder="blurOnSubmit = false"
          returnKeyType="next"
          blurOnSubmit={false}
          onSubmitEditing={() => this.focusNextField('3')}
        />
        <TextInput
          ref="3"
          style={styles.singleLine}
          keyboardType="url"
          placeholder="blurOnSubmit = false"
          returnKeyType="next"
          blurOnSubmit={false}
          onSubmitEditing={() => this.focusNextField('4')}
        />
        <TextInput
          ref="4"
          style={styles.singleLine}
          keyboardType="numeric"
          placeholder="blurOnSubmit = false"
          blurOnSubmit={false}
          onSubmitEditing={() => this.focusNextField('5')}
        />
        <TextInput
          ref="5"
          style={styles.singleLine}
          keyboardType="numbers-and-punctuation"
          placeholder="blurOnSubmit = true"
          returnKeyType="done"
        />
      </View>
    );
  }
});

AppRegistry.registerComponent('AwesomeProject', () => BlurOnSubmitExample);

var styles = StyleSheet.create({
  multiline: {
    height: 60,
    fontSize: 16,
    padding: 4,
    marginBottom: 10,
  },
  eventLabel: {
    margin: 3,
    fontSize: 12,
  },
  singleLine: {
    fontSize: 16,
    padding: 4,
  },
  singleLineWithHeightTextInput: {
    height: 30,
  },
  hashtag: {
    color: 'blue',
    fontWeight: 'bold',
  },
});

exports.title = '<TextInput>';
exports.description = 'Single and multi-line text inputs.';
exports.examples = [
  {
    title: 'Auto-focus',
    render: function() {
      return (
        <TextInput
          autoFocus={true}
          style={styles.singleLine}
          accessibilityLabel="I am the accessibility label for text input"
        />
      );
    }
  },
  {
    title: "Live Re-Write (<sp>  ->  '_')",
    render: function() {
      return <RewriteExample />;
    }
  },
  {
    title: 'Auto-capitalize',
    render: function() {
      var autoCapitalizeTypes = [
        'none',
        'sentences',
        'words',
        'characters',
      ];
      var examples = autoCapitalizeTypes.map((type) => {
        return (
          <TextInput
            key={type}
            autoCapitalize={type}
            placeholder={'autoCapitalize: ' + type}
            style={styles.singleLine}
          />
        );
      });
      return <View>{examples}</View>;
    }
  },
  {
    title: 'Auto-correct',
    render: function() {
      return (
        <View>
          <TextInput
            autoCorrect={true}
            placeholder="This has autoCorrect"
            style={styles.singleLine}
          />
          <TextInput
            autoCorrect={false}
            placeholder="This does not have autoCorrect"
            style={styles.singleLine}
          />
        </View>
      );
    }
  },
  {
    title: 'Keyboard types',
    render: function() {
      var keyboardTypes = [
        'default',
        'email-address',
        'numeric',
        'phone-pad',
      ];
      var examples = keyboardTypes.map((type) => {
        return (
          <TextInput
            key={type}
            keyboardType={type}
            placeholder={'keyboardType: ' + type}
            style={styles.singleLine}
          />
        );
      });
      return <View>{examples}</View>;
    }
  },
  {
    title: 'Blur on submit',
    render: function(): ReactElement { return <BlurOnSubmitExample />; },
  },
  {
    title: 'Event handling',
    render: function(): ReactElement { return <TextEventsExample />; },
  },
  {
    title: 'Colors and text inputs',
    render: function() {
      return (
        <View>
          <TextInput
            style={[styles.singleLine]}
            defaultValue="Default color text"
          />
          <TextInput
            style={[styles.singleLine, {color: 'green'}]}
            defaultValue="Green Text"
          />
          <TextInput
            placeholder="Default placeholder text color"
            style={styles.singleLine}
          />
          <TextInput
            placeholder="Red placeholder text color"
            placeholderTextColor="red"
            style={styles.singleLine}
          />
          <TextInput
            placeholder="Default underline color"
            style={styles.singleLine}
          />
          <TextInput
            placeholder="Blue underline color"
            style={styles.singleLine}
            underlineColorAndroid="blue"
          />
          <TextInput
            defaultValue="Same BackgroundColor as View "
            style={[styles.singleLine, {backgroundColor: 'rgba(100, 100, 100, 0.3)'}]}>
            <Text style={{backgroundColor: 'rgba(100, 100, 100, 0.3)'}}>
              Darker backgroundColor
            </Text>
          </TextInput>
          <TextInput
            defaultValue="Highlight Color is red"
            selectionColor={'red'}
            style={styles.singleLine}>
          </TextInput>
        </View>
      );
    }
  },
  {
    title: 'Text input, themes and heights',
    render: function() {
      return (
        <TextInput
          placeholder="If you set height, beware of padding set from themes"
          style={[styles.singleLineWithHeightTextInput]}
        />
      );
    }
  },
  {
    title: 'fontFamily, fontWeight and fontStyle',
    render: function() {
      return (
        <View>
          <TextInput 
            style={[styles.singleLine, {fontFamily: 'sans-serif'}]}
            placeholder="Custom fonts like Sans-Serif are supported"
          />
          <TextInput 
            style={[styles.singleLine, {fontFamily: 'sans-serif', fontWeight: 'bold'}]}
            placeholder="Sans-Serif bold"
          />
          <TextInput 
            style={[styles.singleLine, {fontFamily: 'sans-serif', fontStyle: 'italic'}]}
            placeholder="Sans-Serif italic"
          />
          <TextInput 
            style={[styles.singleLine, {fontFamily: 'serif'}]}
            placeholder="Serif"
          />
        </View>
      );
    }
  },
  {
    title: 'Passwords',
    render: function() {
      return (
        <View>
          <TextInput
            defaultValue="iloveturtles"
            secureTextEntry={true}
            style={styles.singleLine}
          />
          <TextInput
            secureTextEntry={true}
            style={[styles.singleLine, {color: 'red'}]}
            placeholder="color is supported too"
            placeholderTextColor="red"
          />
        </View>
      );
    }
  },
  {
    title: 'Editable',
    render: function() {
      return (
        <TextInput
           defaultValue="Can't touch this! (>'-')> ^(' - ')^ <('-'<) (>'-')> ^(' - ')^"
           editable={false}
           style={styles.singleLine}
         />
      );
    }
  },
  {
    title: 'Multiline',
    render: function() {
      return (
        <View>
          <TextInput
            autoCorrect={true}
            placeholder="multiline, aligned top-left"
            placeholderTextColor="red"
            multiline={true}
            style={[styles.multiline, {textAlign: "left", textAlignVertical: "top"}]}
          />
          <TextInput
            autoCorrect={true}
            placeholder="multiline, aligned center"
            placeholderTextColor="green"
            multiline={true}
            style={[styles.multiline, {textAlign: "center", textAlignVertical: "center"}]}
          />
          <TextInput
            autoCorrect={true}
            multiline={true}
            style={[styles.multiline, {color: 'blue'}, {textAlign: "right", textAlignVertical: "bottom"}]}>
            <Text style={styles.multiline}>multiline with children, aligned bottom-right</Text>
          </TextInput>
        </View>
      );
    }
  },
  {
    title: 'Fixed number of lines',
    platform: 'android',
    render: function() {
      return (
        <View>
          <TextInput numberOfLines={2}
            multiline={true}
            placeholder="Two line input"
          />
          <TextInput numberOfLines={5}
            multiline={true}
            placeholder="Five line input"
          />
        </View>
      );
    }
  },
  {
    title: 'Auto-expanding',
    render: function() {
      return (
        <View>
          <AutoExpandingTextInput
            placeholder="height increases with content"
            enablesReturnKeyAutomatically={true}
            returnKeyType="done"
          />
        </View>
      );
    }
  },
  {
    title: 'Attributed text',
    render: function() {
      return <TokenizedTextExample />;
    }
  },
  {
    title: 'Return key',
    render: function() {
      var returnKeyTypes = [
        'none',
        'go',
        'search',
        'send',
        'done',
        'previous',
        'next',
      ];
      var returnKeyLabels = [
        'Compile',
        'React Native',
      ];
      var examples = returnKeyTypes.map((type) => {
        return (
          <TextInput
            key={type}
            returnKeyType={type}
            placeholder={'returnKeyType: ' + type}
            style={styles.singleLine}
          />
        );
      });
      var types = returnKeyLabels.map((type) => {
        return (
          <TextInput
            key={type}
            returnKeyLabel={type}
            placeholder={'returnKeyLabel: ' + type}
            style={styles.singleLine}
          />
        );
      });
      return <View>{examples}{types}</View>;
    }
  },
];

//AppRegistry.registerComponent('AwesomeProject', () => UselessTextInputMultiline);
/**
    Ê≥®ÊÑèÊúâ‰∫õÂ±ûÊÄß‰ªÖÂú®multiline‰∏∫trueÊàñËÄÖ‰∏∫falseÁöÑÊó∂ÂÄôÊúâÊïà„ÄÇÊ≠§Â§ñÔºåÂΩìmultiline=falseÊó∂Ôºå‰∏∫ÂÖÉÁ¥†ÁöÑÊüê‰∏Ä‰∏™ËæπÊ∑ªÂä†ËæπÊ°ÜÊ†∑ÂºèÔºà‰æãÂ¶ÇÔºöborderBottomColorÔºåborderLeftWidthÁ≠âÔºâÂ∞Ü‰∏ç‰ºöÁîüÊïà„ÄÇ‰∏∫‰∫ÜËÉΩÂ§üÂÆûÁé∞ÊïàÊûú‰Ω†ÂèØ‰ª•‰ΩøÁî®‰∏Ä‰∏™ViewÊù•ÂåÖË£πTextInput„ÄÇ
    autoCapitalize enum('none', 'sentences', 'words', 'characters') 

ÊéßÂà∂TextInputÊòØÂê¶Ë¶ÅËá™Âä®Â∞ÜÁâπÂÆöÂ≠óÁ¨¶ÂàáÊç¢‰∏∫Â§ßÂÜôÔºö

characters: ÊâÄÊúâÁöÑÂ≠óÁ¨¶„ÄÇ
words: ÊØè‰∏™ÂçïËØçÁöÑÁ¨¨‰∏Ä‰∏™Â≠óÁ¨¶„ÄÇ
sentences: ÊØèÂè•ËØùÁöÑÁ¨¨‰∏Ä‰∏™Â≠óÁ¨¶ÔºàÈªòËÆ§Ôºâ„ÄÇ
none: ‰∏çËá™Âä®ÂàáÊç¢‰ªª‰ΩïÂ≠óÁ¨¶‰∏∫Â§ßÂÜô„ÄÇ
autoCorrect bool 

Â¶ÇÊûú‰∏∫falseÔºå‰ºöÂÖ≥Èó≠ÊãºÂÜôËá™Âä®‰øÆÊ≠£„ÄÇÈªòËÆ§ÂÄºÊòØtrue„ÄÇ

autoFocus bool 

Â¶ÇÊûú‰∏∫trueÔºåÂú®componentDidMountÂêé‰ºöËé∑ÂæóÁÑ¶ÁÇπ„ÄÇÈªòËÆ§ÂÄº‰∏∫false„ÄÇ

blurOnSubmit bool 

Â¶ÇÊûú‰∏∫trueÔºåÊñáÊú¨Ê°Ü‰ºöÂú®Êèê‰∫§ÁöÑÊó∂ÂÄôÂ§±ÁÑ¶„ÄÇÂØπ‰∫éÂçïË°åËæìÂÖ•Ê°ÜÈªòËÆ§ÂÄº‰∏∫trueÔºåÂ§öË°åÂàô‰∏∫false„ÄÇÊ≥®ÊÑèÔºöÂØπ‰∫éÂ§öË°åËæìÂÖ•Ê°ÜÊù•ËØ¥ÔºåÂ¶ÇÊûúÂ∞ÜblurOnSubmitËÆæ‰∏∫trueÔºåÂàôÂú®Êåâ‰∏ãÂõûËΩ¶ÈîÆÊó∂Â∞±‰ºöÂ§±ÂéªÁÑ¶ÁÇπÂêåÊó∂Ëß¶ÂèëonSubmitEditing‰∫ã‰ª∂ÔºåËÄå‰∏ç‰ºöÊç¢Ë°å„ÄÇ

defaultValue string 

Êèê‰æõ‰∏Ä‰∏™ÊñáÊú¨Ê°Ü‰∏≠ÁöÑÂàùÂßãÂÄº„ÄÇÂΩìÁî®Êà∑ÂºÄÂßãËæìÂÖ•ÁöÑÊó∂ÂÄôÔºåÂÄºÂ∞±ÂèØ‰ª•ÊîπÂèò„ÄÇ

Âú®‰∏Ä‰∫õÁÆÄÂçïÁöÑ‰ΩøÁî®ÊÉÖÂΩ¢‰∏ãÔºåÂ¶ÇÊûú‰Ω†‰∏çÊÉ≥Áî®ÁõëÂê¨Ê∂àÊÅØÁÑ∂ÂêéÊõ¥Êñ∞valueÂ±ûÊÄßÁöÑÊñπÊ≥ïÊù•‰øùÊåÅÂ±ûÊÄßÂíåÁä∂ÊÄÅÂêåÊ≠•ÁöÑÊó∂ÂÄôÔºåÂ∞±ÂèØ‰ª•Áî®defaultValueÊù•‰ª£Êõø„ÄÇ

editable bool 

Â¶ÇÊûú‰∏∫falseÔºåÊñáÊú¨Ê°ÜÊòØ‰∏çÂèØÁºñËæëÁöÑ„ÄÇÈªòËÆ§ÂÄº‰∏∫true„ÄÇ

keyboardType enum("default", 'numeric', 'email-address', "ascii-capable", 'numbers-and-punctuation', 'url', 'number-pad', 'phone-pad', 'name-phone-pad', 'decimal-pad', 'twitter', 'web-search') 

ÂÜ≥ÂÆöÂºπÂá∫ÁöÑ‰ΩïÁßçËΩØÈîÆÁõòÁöÑÔºåË≠¨Â¶ÇnumericÔºàÁ∫ØÊï∞Â≠óÈîÆÁõòÔºâ„ÄÇ

Ëøô‰∫õÂÄºÂú®ÊâÄÊúâÂπ≥Âè∞ÈÉΩÂèØÁî®Ôºö

default
numeric
email-address
maxLength number 

ÈôêÂà∂ÊñáÊú¨Ê°Ü‰∏≠ÊúÄÂ§öÁöÑÂ≠óÁ¨¶Êï∞„ÄÇ‰ΩøÁî®Ëøô‰∏™Â±ûÊÄßËÄå‰∏çÁî®JSÈÄªËæëÂéªÂÆûÁé∞ÔºåÂèØ‰ª•ÈÅøÂÖçÈó™ÁÉÅÁöÑÁé∞Ë±°„ÄÇ

multiline bool 

Â¶ÇÊûú‰∏∫trueÔºåÊñáÊú¨Ê°Ü‰∏≠ÂèØ‰ª•ËæìÂÖ•Â§öË°åÊñáÂ≠ó„ÄÇÈªòËÆ§ÂÄº‰∏∫false„ÄÇ

onBlur function 

ÂΩìÊñáÊú¨Ê°ÜÂ§±ÂéªÁÑ¶ÁÇπÁöÑÊó∂ÂÄôË∞ÉÁî®Ê≠§ÂõûË∞ÉÂáΩÊï∞„ÄÇ

onChange function 

ÂΩìÊñáÊú¨Ê°ÜÂÜÖÂÆπÂèòÂåñÊó∂Ë∞ÉÁî®Ê≠§ÂõûË∞ÉÂáΩÊï∞„ÄÇ

onChangeText function 

ÂΩìÊñáÊú¨Ê°ÜÂÜÖÂÆπÂèòÂåñÊó∂Ë∞ÉÁî®Ê≠§ÂõûË∞ÉÂáΩÊï∞„ÄÇÊîπÂèòÂêéÁöÑÊñáÂ≠óÂÜÖÂÆπ‰ºö‰Ωú‰∏∫ÂèÇÊï∞‰º†ÈÄí„ÄÇ

onEndEditing function 

ÂΩìÊñáÊú¨ËæìÂÖ•ÁªìÊùüÂêéË∞ÉÁî®Ê≠§ÂõûË∞ÉÂáΩÊï∞„ÄÇ

onFocus function 

ÂΩìÊñáÊú¨Ê°ÜËé∑ÂæóÁÑ¶ÁÇπÁöÑÊó∂ÂÄôË∞ÉÁî®Ê≠§ÂõûË∞ÉÂáΩÊï∞„ÄÇ

onLayout function 

ÂΩìÁªÑ‰ª∂ÊåÇËΩΩÊàñËÄÖÂ∏ÉÂ±ÄÂèòÂåñÁöÑÊó∂ÂÄôË∞ÉÁî®ÔºåÂèÇÊï∞‰∏∫{x, y, width, height}„ÄÇ

onSubmitEditing function 

Ê≠§ÂõûË∞ÉÂáΩÊï∞ÂΩìËΩØÈîÆÁõòÁöÑÁ°ÆÂÆö/Êèê‰∫§ÊåâÈíÆË¢´Êåâ‰∏ãÁöÑÊó∂ÂÄôË∞ÉÁî®Ê≠§ÂáΩÊï∞„ÄÇÂ¶ÇÊûúmultiline={true}ÔºåÊ≠§Â±ûÊÄß‰∏çÂèØÁî®„ÄÇ

placeholder string 

Â¶ÇÊûúÊ≤°Êúâ‰ªª‰ΩïÊñáÂ≠óËæìÂÖ•Ôºå‰ºöÊòæÁ§∫Ê≠§Â≠óÁ¨¶‰∏≤„ÄÇ

placeholderTextColor string 

Âç†‰ΩçÂ≠óÁ¨¶‰∏≤ÊòæÁ§∫ÁöÑÊñáÂ≠óÈ¢úËâ≤„ÄÇ

secureTextEntry bool 

Â¶ÇÊûú‰∏∫trueÔºåÊñáÊú¨Ê°Ü‰ºöÈÅÆ‰Ωè‰πãÂâçËæìÂÖ•ÁöÑÊñáÂ≠óÔºåËøôÊ†∑Á±ª‰ººÂØÜÁ†Å‰πãÁ±ªÁöÑÊïèÊÑüÊñáÂ≠óÂèØ‰ª•Êõ¥Âä†ÂÆâÂÖ®„ÄÇÈªòËÆ§ÂÄº‰∏∫false„ÄÇ

selectTextOnFocus bool 

Â¶ÇÊûú‰∏∫trueÔºåÂΩìËé∑ÂæóÁÑ¶ÁÇπÁöÑÊó∂ÂÄôÔºåÊâÄÊúâÁöÑÊñáÂ≠óÈÉΩ‰ºöË¢´ÈÄâ‰∏≠„ÄÇ

selectionColor string 

ËÆæÁΩÆËæìÂÖ•Ê°ÜÈ´ò‰∫ÆÊó∂ÁöÑÈ¢úËâ≤ÔºàÂú®iOS‰∏äËøòÂåÖÊã¨ÂÖâÊ†áÔºâ

style Text#style 

ËØëÊ≥®ÔºöËøôÊÑèÂë≥ÁùÄÊú¨ÁªÑ‰ª∂ÁªßÊâø‰∫ÜÊâÄÊúâTextÁöÑÊ†∑Âºè„ÄÇ

value string 

ÊñáÊú¨Ê°Ü‰∏≠ÁöÑÊñáÂ≠óÂÜÖÂÆπ„ÄÇ

TextInputÊòØ‰∏Ä‰∏™ÂèóÁ∫¶ÊùüÁöÑ(Controlled)ÁöÑÁªÑ‰ª∂ÔºåÊÑèÂë≥ÁùÄÂ¶ÇÊûúÊèê‰æõ‰∫ÜvalueÂ±ûÊÄßÔºåÂéüÁîüÂÄº‰ºöË¢´Âº∫Âà∂‰∏évalueÂ±ûÊÄß‰øùÊåÅ‰∏ÄËá¥„ÄÇÂú®Â§ßÈÉ®ÂàÜÊÉÖÂÜµ‰∏ãËøôÈÉΩÂ∑•‰ΩúÁöÑÂæàÂ•ΩÔºå‰∏çËøáÊúâ‰∫õÊÉÖÂÜµ‰∏ã‰ºöÂØºËá¥‰∏Ä‰∫õÈó™ÁÉÅÁé∞Ë±°‚Äî‚Äî‰∏Ä‰∏™Â∏∏ËßÅÁöÑÂéüÂõ†Â∞±ÊòØÈÄöËøá‰∏çÊîπÂèòvalueÊù•ÈòªÊ≠¢Áî®Êà∑ËøõË°åÁºñËæë„ÄÇÂ¶ÇÊûú‰Ω†Â∏åÊúõÈòªÊ≠¢Áî®Êà∑ËæìÂÖ•ÔºåÂèØ‰ª•ËÄÉËôëËÆæÁΩÆeditable={false}ÔºõÂ¶ÇÊûú‰Ω†ÊòØÂ∏åÊúõÈôêÂà∂ËæìÂÖ•ÁöÑÈïøÂ∫¶ÔºåÂèØ‰ª•ËÄÉËôëËÆæÁΩÆmaxLengthÂ±ûÊÄßÔºåËøô‰∏§‰∏™Â±ûÊÄßÈÉΩ‰∏ç‰ºöÂØºËá¥Èó™ÁÉÅ„ÄÇ

iosclearButtonMode enum('never', 'while-editing', 'unless-editing', 'always') 

ÊòØÂê¶Ë¶ÅÂú®ÊñáÊú¨Ê°ÜÂè≥‰æßÊòæÁ§∫‚ÄúÊ∏ÖÈô§‚ÄùÊåâÈíÆ„ÄÇ

iosclearTextOnFocus bool 

Â¶ÇÊûú‰∏∫trueÔºåÊØèÊ¨°ÂºÄÂßãËæìÂÖ•ÁöÑÊó∂ÂÄôÈÉΩ‰ºöÊ∏ÖÈô§ÊñáÊú¨Ê°ÜÁöÑÂÜÖÂÆπ„ÄÇ

iosenablesReturnKeyAutomatically bool 

Â¶ÇÊûú‰∏∫trueÔºåÈîÆÁõò‰ºöÂú®ÊñáÊú¨Ê°ÜÂÜÖÊ≤°ÊúâÊñáÂ≠óÁöÑÊó∂ÂÄôÁ¶ÅÁî®Á°ÆËÆ§ÊåâÈíÆ„ÄÇÈªòËÆ§ÂÄº‰∏∫false„ÄÇ

ioskeyboardAppearance enum('default', 'light', 'dark') 

ÊåáÂÆöÈîÆÁõòÁöÑÈ¢úËâ≤„ÄÇ

iosonKeyPress function 

ÂΩì‰∏Ä‰∏™ÈîÆË¢´Êåâ‰∏ãÁöÑÊó∂ÂÄôË∞ÉÁî®Ê≠§ÂõûË∞É„ÄÇË¢´Êåâ‰∏ãÁöÑÈîÆ‰ºö‰Ωú‰∏∫ÂèÇÊï∞‰º†ÈÄíÁªôÂõûË∞ÉÂáΩÊï∞„ÄÇ‰ºöÂú®onChange‰πãÂâçË∞ÉÁî®„ÄÇ

iosreturnKeyType enum('default', 'go', 'google', 'join', 'next', 'route', 'search', 'send', 'yahoo', 'done', 'emergency-call')

ÂÜ≥ÂÆö‚ÄúÁ°ÆÂÆö‚ÄùÊåâÈíÆÊòæÁ§∫ÁöÑÂÜÖÂÆπ„ÄÇ

iosselectionState DocumentSelectionState 

ÂèÇËßÅDocumentSelectionState.jsÔºåÂèØ‰ª•ÊéßÂà∂‰∏Ä‰∏™ÊñáÊ°£‰∏≠Âì™ÊÆµÊñáÂ≠óË¢´ÈÄâ‰∏≠ÁöÑÁä∂ÊÄÅ„ÄÇ

androidnumberOfLines number 

ËÆæÁΩÆËæìÂÖ•Ê°ÜÁöÑË°åÊï∞„ÄÇÂΩìmultilineËÆæÁΩÆ‰∏∫trueÊó∂‰ΩøÁî®ÂÆÉÔºåÂèØ‰ª•Âç†ÊçÆÂØπÂ∫îÁöÑË°åÊï∞„ÄÇ

androidunderlineColorAndroid string 

ÊñáÊú¨Ê°ÜÁöÑ‰∏ãÂàíÁ∫øÈ¢úËâ≤(ËØëÊ≥®ÔºöÂ¶ÇÊûúË¶ÅÂéªÊéâÊñáÊú¨Ê°ÜÁöÑËæπÊ°ÜÔºåËØ∑Â∞ÜÊ≠§Â±ûÊÄßËÆæ‰∏∫ÈÄèÊòétransparent)„ÄÇ

ÊñπÊ≥ï
isFocused(): boolean 

ËøîÂõûÂÄºË°®ÊòéÂΩìÂâçËæìÂÖ•Ê°ÜÊòØÂê¶Ëé∑Âæó‰∫ÜÁÑ¶ÁÇπ„ÄÇ

clear() 

Ê∏ÖÁ©∫ËæìÂÖ•Ê°ÜÁöÑÂÜÖÂÆπ„ÄÇ
*/